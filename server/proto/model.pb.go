// Code generated by protoc-gen-go. DO NOT EDIT.
// source: model.proto

package head

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Tdata struct {
	Hash                 string   `protobuf:"bytes,1,opt,name=Hash,proto3" json:"Hash,omitempty"`
	Addr                 string   `protobuf:"bytes,2,opt,name=Addr,proto3" json:"Addr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Tdata) Reset()         { *m = Tdata{} }
func (m *Tdata) String() string { return proto.CompactTextString(m) }
func (*Tdata) ProtoMessage()    {}
func (*Tdata) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c16552f9fdb66d8, []int{0}
}

func (m *Tdata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Tdata.Unmarshal(m, b)
}
func (m *Tdata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Tdata.Marshal(b, m, deterministic)
}
func (m *Tdata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tdata.Merge(m, src)
}
func (m *Tdata) XXX_Size() int {
	return xxx_messageInfo_Tdata.Size(m)
}
func (m *Tdata) XXX_DiscardUnknown() {
	xxx_messageInfo_Tdata.DiscardUnknown(m)
}

var xxx_messageInfo_Tdata proto.InternalMessageInfo

func (m *Tdata) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *Tdata) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

type TdataResp struct {
	Err                  string   `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TdataResp) Reset()         { *m = TdataResp{} }
func (m *TdataResp) String() string { return proto.CompactTextString(m) }
func (*TdataResp) ProtoMessage()    {}
func (*TdataResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c16552f9fdb66d8, []int{1}
}

func (m *TdataResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TdataResp.Unmarshal(m, b)
}
func (m *TdataResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TdataResp.Marshal(b, m, deterministic)
}
func (m *TdataResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TdataResp.Merge(m, src)
}
func (m *TdataResp) XXX_Size() int {
	return xxx_messageInfo_TdataResp.Size(m)
}
func (m *TdataResp) XXX_DiscardUnknown() {
	xxx_messageInfo_TdataResp.DiscardUnknown(m)
}

var xxx_messageInfo_TdataResp proto.InternalMessageInfo

func (m *TdataResp) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

func init() {
	proto.RegisterType((*Tdata)(nil), "head.Tdata")
	proto.RegisterType((*TdataResp)(nil), "head.TdataResp")
}

func init() { proto.RegisterFile("model.proto", fileDescriptor_4c16552f9fdb66d8) }

var fileDescriptor_4c16552f9fdb66d8 = []byte{
	// 141 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xce, 0xcd, 0x4f, 0x49,
	0xcd, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0xc9, 0x48, 0x4d, 0x4c, 0x51, 0xd2, 0xe7,
	0x62, 0x0d, 0x49, 0x49, 0x2c, 0x49, 0x14, 0x12, 0xe2, 0x62, 0xf1, 0x48, 0x2c, 0xce, 0x90, 0x60,
	0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x02, 0xb3, 0x41, 0x62, 0x8e, 0x29, 0x29, 0x45, 0x12, 0x4c, 0x10,
	0x31, 0x10, 0x5b, 0x49, 0x96, 0x8b, 0x13, 0xac, 0x21, 0x28, 0xb5, 0xb8, 0x40, 0x48, 0x80, 0x8b,
	0x39, 0xb5, 0xa8, 0x08, 0xaa, 0x07, 0xc4, 0x34, 0x32, 0xe4, 0x62, 0x0e, 0x0a, 0x70, 0x16, 0xd2,
	0xe2, 0x62, 0x09, 0x4e, 0xcd, 0x4b, 0x11, 0xe2, 0xd6, 0x03, 0xd9, 0xa2, 0x07, 0xd6, 0x21, 0xc5,
	0x8f, 0xc4, 0x01, 0x69, 0x57, 0x62, 0xd0, 0x60, 0x34, 0x60, 0x4c, 0x62, 0x03, 0xbb, 0xc7, 0x18,
	0x10, 0x00, 0x00, 0xff, 0xff, 0xb4, 0x28, 0x9e, 0x55, 0x9e, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RPCClient is the client API for RPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RPCClient interface {
	Send(ctx context.Context, opts ...grpc.CallOption) (RPC_SendClient, error)
}

type rPCClient struct {
	cc *grpc.ClientConn
}

func NewRPCClient(cc *grpc.ClientConn) RPCClient {
	return &rPCClient{cc}
}

func (c *rPCClient) Send(ctx context.Context, opts ...grpc.CallOption) (RPC_SendClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RPC_serviceDesc.Streams[0], "/head.RPC/Send", opts...)
	if err != nil {
		return nil, err
	}
	x := &rPCSendClient{stream}
	return x, nil
}

type RPC_SendClient interface {
	Send(*Tdata) error
	Recv() (*TdataResp, error)
	grpc.ClientStream
}

type rPCSendClient struct {
	grpc.ClientStream
}

func (x *rPCSendClient) Send(m *Tdata) error {
	return x.ClientStream.SendMsg(m)
}

func (x *rPCSendClient) Recv() (*TdataResp, error) {
	m := new(TdataResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RPCServer is the server API for RPC service.
type RPCServer interface {
	Send(RPC_SendServer) error
}

// UnimplementedRPCServer can be embedded to have forward compatible implementations.
type UnimplementedRPCServer struct {
}

func (*UnimplementedRPCServer) Send(srv RPC_SendServer) error {
	return status.Errorf(codes.Unimplemented, "method Send not implemented")
}

func RegisterRPCServer(s *grpc.Server, srv RPCServer) {
	s.RegisterService(&_RPC_serviceDesc, srv)
}

func _RPC_Send_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RPCServer).Send(&rPCSendServer{stream})
}

type RPC_SendServer interface {
	Send(*TdataResp) error
	Recv() (*Tdata, error)
	grpc.ServerStream
}

type rPCSendServer struct {
	grpc.ServerStream
}

func (x *rPCSendServer) Send(m *TdataResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *rPCSendServer) Recv() (*Tdata, error) {
	m := new(Tdata)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _RPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "head.RPC",
	HandlerType: (*RPCServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Send",
			Handler:       _RPC_Send_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "model.proto",
}
